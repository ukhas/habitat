/*
    Flight IDs are CouchDB document IDs.
*/
"c89860d6f68b1f31ac9480ff9f95bb62": {
    "type": "flight",

    /*
        Start and end dates reflect the time period that telemetry for this
        payload will be logged against this flight, typically a 24 hour period
        from the start date.
    */
    "start": 1292771680,
    "end": 1292772670,

    /*
        Name is used to refer to this flight in various user interfaces.
    */
    "name": "Habitat Test Launch",

    /*
        Launch time, timezone and location reflect when and where the launch
        actually happened. Timezone should be a tz db identifier e.g.,
        "Europe/London".
    */
    "launch": {
        "time": 1292771780,
        "timezone": "Europe/London",
        "location": {
            "latitude": 52.2135,
            "longitude": 0.0968
        }
    }

    /*
        Metadata stores various human-readable information about the flight,
        which can be used to identify it and be otherwise informative when
        browsing the archives. These fields are all optional.
    */
    "metadata": {
        "location": "Churchill College, Cambridge, UK",
        "predicted_landing": "Washed up at sea",
        "project": "Habitat",
        "group": "HabHub"
    },

    /*
        Payloads contains complete information on each payload flying in this
        flight.  This includes radio settings and telemetry format.
    */
    "payloads": {
        "habitat": {
            /*
                Radio contains information for actually tuning a radio to
                receive the payload.
            */
            "radio": {
                "frequency": 434.075,
                "mode": "USB"
            },

            /*
                Telemetry contains information for decoding the received audio.
            */
            "telemetry": {
                "modulation": "rtty",
                "shift": 425,
                "encoding": "ascii-8",
                "baud": 50,
                "parity": "none",
                "stop": 2
            },

            /*
                Sentence contains information for parsing the received data
                into useful data.  Protocol reflects what parser module should
                be used, and the rest of this example is specific to UKHAS:
                    * Checksum indicates the checksum function in use
                    * Payload indicates the payload name, the first field
                        of any UKHAS-protocol sentence
                    * Fields is a list of dictionaries containing name,
                        type and (when type is "coordinate") format keys.
            */
            "sentence": {
                "protocol": "UKHAS",
                "checksum": "crc16-ccitt",
                "payload": "habitat",
                "fields": [
                    {
                        "name": "message_count",
                        "type": "base.ascii_int"
                    }, {
                        "name": "time",
                        "type": "stdtelem.time"
                    }, {
                        "name": "latitude",
                        "type": "stdtelem.coordinate",
                        "format": "dd.dddd"
                    }, {
                        "name": "longitude",
                        "type": "stdtelem.coordinate",
                        "format": "dd.dddd"
                    }, {
                        "name": "altitude",
                        "type": "base.ascii_int"
                    }, {
                        "name": "speed",
                        "type": "base.ascii_float"
                    }, {
                        "name": "internal_temperature",
                        "type": "base.ascii_float"
                    }
                ]
            },

            /*
                Filters is a list of intermediate or post parse filters
                which are applied either before or after the parser
                is used to extract the field information.
                (Pre-filters run on all payloads for a given protocol
                and therefore are configured separately).
                They may be either normal filters, in which case a
                Python path is specified for the function and a
                configuration object may be passed, or hotfix filters,
                in which case the Python code is given as a string making
                up the body of a function that is passed 'message' as its
                parameter.
            */
            "filters": {
                "intermediate": [
                    {
                        "type": "normal",
                        "callable": "habitat.filters.ohnonotagain",
                        "config": {
                            "fubared": true
                        }
                   }
                ],
                "post": [
                    {
                        "type": "hotfix",
                        "code": "return message + '\r\n'",
                        "signature": "//actual signature here, see certs/README.md",
                        "certificate": "cert.crt"
                    }
                ]
            },

            /*
                Chasers are people out tracking the payloads and moving as they
                do so, and therefore are also transmitting GPS telemetry.
            */
            "chasers": [
                "M0RND",
                "2E0JSO"
            ]
        }
    }
}
